// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const addPost = `-- name: AddPost :one
INSERT INTO posts (title, content, category, tags) 
VALUES ($1, $2, $3, $4)
RETURNING id, title, content, category, tags, createdat, updatedat
`

type AddPostParams struct {
	Title    string
	Content  string
	Category sql.NullString
	Tags     []string
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, addPost,
		arg.Title,
		arg.Content,
		arg.Category,
		pq.Array(arg.Tags),
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		pq.Array(&i.Tags),
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const addUser = `-- name: AddUser :one
INSERT INTO users (email, password, role) 
VALUES ($1, $2, $3)
RETURNING id, email, password, role
`

type AddUserParams struct {
	Email    string
	Password string
	Role     string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Email, arg.Password, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :one
DELETE FROM posts 
WHERE id = $1
RETURNING id, title, content, category, tags, createdat, updatedat
`

func (q *Queries) DeletePost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, deletePost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		pq.Array(&i.Tags),
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const filterPosts = `-- name: FilterPosts :many
SELECT id, title, content, category, tags, createdat, updatedat FROM posts 
WHERE title ILIKE '%' || $1 || '%' 
   OR content ILIKE '%' || $1 || '%' 
   OR category ILIKE '%' || $1 || '%'
`

func (q *Queries) FilterPosts(ctx context.Context, dollar_1 sql.NullString) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, filterPosts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Category,
			pq.Array(&i.Tags),
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, category, tags, createdat, updatedat FROM posts 
WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		pq.Array(&i.Tags),
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, role FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, content, category, tags, createdat, updatedat FROM posts
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Category,
			pq.Array(&i.Tags),
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts 
SET title = $2, content = $3, category = $4, tags = $5 
WHERE id = $1
RETURNING id, title, content, category, tags, createdat, updatedat
`

type UpdatePostParams struct {
	ID       int32
	Title    string
	Content  string
	Category sql.NullString
	Tags     []string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Category,
		pq.Array(arg.Tags),
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		pq.Array(&i.Tags),
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
